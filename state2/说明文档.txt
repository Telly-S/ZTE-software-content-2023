说明：最终提交的说明文档，但可能不是最高分的程序。
但是此次提交的程序注释较全面，最高分的程序和此程序整体思路一致，可能在参数和排序方面有略微不同。(最高分程序的代码误删了，暂时无法找到 (。﹏。|||) )

思路：
	0、对数据文件 ports 按照带宽大小升序排列，flows 按照进入设备的时间进行分组。
	1、每次时钟滴答(timeCounter)更新时，取出当前时间组的所有流，把其加入调度区，然后对调度区的流按照权重算法排序。
	2、先尽量把按权重排序的靠前流塞入符合带宽的无等待队列的port，因为这样的端口没有排队区，可直接把流插入发送队列中。
	循环此过程直到所有无等待队列的port不满足流所需要的带宽为止。
	3、一般情况下，在2步骤结束后，有些无等待队列的 port 中仍有些许带宽，如果无等待队列的 port 最大剩余的带宽(maxRemainPortWidth) >= 调取区内最小的流带宽，
	此时可以安排较小的流进入，以增大端口带宽的利用率。先从调取区中找出所有小于 maxRemainPortWidth 的流，并暂存，
	再从暂存的这些流中找到占用带宽最大的流，塞入到 maxRemainPortWidth 所在的端口中。循环此过程直到所有无等待队列的port不足以插入任何流。
	4、如果此时调度区仍然超限，则找具有空闲排队区的port，将调度区内最小带宽的流插入排队区中。循环此过程直到调度区不超限或无空闲排队区。
	5、如果此时调度区仍然超限，则需要丢弃多余流，把按权重排序的靠后的流丢弃。
	6、对每个端口的发送队列进行状态更新。刚开始发送的流标记、发送完成的流的删除、排队区的流进入发送队列、所有的流发送完毕后的结束。



